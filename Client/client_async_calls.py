#!/usr/bin/env python3
"""Pymodbus Client modbus async code.

This scrpt uses client_async.py to handle connection,
and have the same options.

The corresponding server must be started before.
"""
import asyncio
import logging

import client_async


_logger = logging.getLogger(__file__)
_logger.setLevel("DEBUG")


SLAVE = 0x01

# ------------------------------------------------------
# Call modbus device (all possible calls are presented).
# ------------------------------------------------------
async def async_read_discrete_inputs(client):
    """Read/Write coils."""
    _logger.info("### Reading discrete inputs")
    rr = await client.read_discrete_inputs(1, 1, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)
   
    rr = await client.read_discrete_inputs(1, 5, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)
    
    rr = await client.read_discrete_inputs(1, 12, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)
    
    rr = await client.read_discrete_inputs(1, 17, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)
   

async def async_write_coils(client):
    _logger.info("###Writing Coils ")
    rr = await client.write_coils(1, [True] * 1, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)

    rr = await client.write_coils(1, [True] * 5, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)

    rr = await client.write_coils(1, [False] * 12, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)

    rr = await client.write_coils(1, [False] * 17, slave=SLAVE)
    assert not rr.isError()  # test that call was OK
    await asyncio.sleep(0.2)

# ------------------------
# Run the calls in groups.
# ------------------------
async def run_async_calls(client):
    """Demonstrate basic read/write calls."""
    await async_read_discrete_inputs(client)
    await async_write_coils(client)



async def main(cmdline=None):
    """Combine setup and run."""
    testclient = client_async.setup_async_client(
        description="Run asynchronous client.", cmdline=cmdline
    )
    await client_async.run_async_client(testclient, modbus_calls=run_async_calls)


if __name__ == "__main__":
    asyncio.run(main())