import sqlite3
from scapy.all import *

# Connect with sqlite database
conn = sqlite3.connect('/home/kali/ICSPentesting/ICSPentesting/Attack/modbus_data.db')
c = conn.cursor()

#Function to sniff Modbus frames
def sniffing(iface):
    flag = True
    while flag:
        Modbus_frames = sniff(iface = iface, filter = "tcp port 502", count = 2)
        Modbus_query = Modbus_frames[1]
        Modbus_ack = Modbus_frames[0]

        if Raw in Modbus_query: 
            modbus_data = Modbus_query[TCP].load
            if modbus_data[8:].hex() == "0001001103000000":
                print("Packet detected")
                flag = False
return Modbus_query, Modbus_ack


# Function to extract Modbus packet fields
def extract_modbus_data(pkt_ack, pkt_query):
    #Extract IP layer information and save it into a vector

    ModbusLoad = pkt_query[TCP].load
    Transaction_Identifier = ModbusLoad[:2].hex()
    Client_Identifier = ModbusLoad[6:7].hex()
    Function_Code = ModbusLoad[7:8].hex()
    ModbusQuery = get_modbus_packet(Transaction_Identifier, Client_Identifier, Function_Code)

    ip_layer = {
        'IP_src': pkt_ack[IP].src,
        'IP_dst': pkt_ack[IP].dst,
    }

    tcp_layer = {
        'Port_src': pkt_ack[TCP].sport,
        'Port_dst': pkt_ack[TCP].dport,
        'window': pkt_ack[TCP].window,
        'seq': pkt_ack[TCP].seq,
        'ack': pkt_ack[TCP].ack
    }

    modbus_tcp_layer = {
        'Transaction Identifier': ModbusQuery[7],
        'Protocol Identifier': ModbusQuery[8],
        'Length': ModbusQuery[9]
        'Unit Identifier': ModbusQuery[10]
    }

    modbus_layer = {
        'Function Code': ModbusQuery[11],
        'Reference Number': ModbusQuery[12],
        'Byte Count': ModbusQuery[13],
        'Data': ModbusQuery[14],
    }



# Get Modbus response from database
def get_modbus_packet(transaction_id, client_id, function_code, packet_type):
    c.execute("SELECT * FROM modbus_data WHERE packet_type=? AND Transaction_Identifier=? AND Unit_Identifier=? AND Function_Code=?", (packet_type, transaction_id, client_id, function_code))
    packet = c.fetchone()
    if packet:
        return packet
    else:
        return None

# Function to inject data into Modbus packages 
def inject_data(pkt):
    pkt[TCP].load += b'\x00\x01\x02\x03' 
    
    return pkt
