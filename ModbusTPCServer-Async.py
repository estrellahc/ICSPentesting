import argparse
import asyncio
import logging
from pymodbus import __version__ as pymodbus_version
from pymodbus.datastore import (
    ModbusSequentialDataBlock,
    ModbusServerContext,
    ModbusSlaveContext,
    ModbusSparseDataBlock,
)
from pymodbus.device import ModbusDeviceIdentification
from pymodbus.server import (
    StartAsyncSerialServer,
    StartAsyncTcpServer,
    StartAsyncTlsServer,
    StartAsyncUdpServer,
)

# Configuración del registro de eventos
logging.basicConfig()
_logger = logging.getLogger(__name__)
_logger.setLevel(logging.INFO)


def setup_server():
    """Configurar y devolver los argumentos del servidor."""
    parser = argparse.ArgumentParser(description="Run asynchronous server.")
    parser.add_argument("--port", type=int, default=5020, help="set port")
    parser.add_argument("--comm", default="tcp", help="set communication, default is tcp")
    args = parser.parse_args()
    
    # Crear el contexto del servidor Modbus
    datablock = ModbusSequentialDataBlock(0x00, [17] * 100)
    context = ModbusSlaveContext(
        di=datablock, co=datablock, hr=datablock, ir=datablock
    )
    context = {
        0x01: context,
        0x02: context,
        0x03: context,
    }
    server_context = ModbusServerContext(slaves=context)

    # Información de identificación del dispositivo
    identity = ModbusDeviceIdentification()
    identity.VendorName = "Pymodbus"
    identity.ProductCode = "PM"
    identity.VendorUrl = "https://github.com/pymodbus-dev/pymodbus/"
    identity.ProductName = "Pymodbus Server"
    identity.ModelName = "Pymodbus Server"
    identity.MajorMinorRevision = pymodbus_version

    return args, server_context, identity


async def run_async_server(args, server_context, identity):
    """Ejecutar el servidor."""
    txt = f"### start ASYNC server, listening on {args.port} - {args.comm}"
    _logger.info(txt)
    
    if args.comm == "tcp":
        address = ("", args.port)
        server = await StartAsyncTcpServer(
            context=server_context,
            identity=identity,
            address=address,
        )

    else:
        _logger.error("Unsupported communication type: %s", args.comm)
        return

    await server.serve_forever()


if __name__ == "__main__":
    args, server_context, identity = setup_server()
    asyncio.run(run_async_server(args, server_context, identity))
